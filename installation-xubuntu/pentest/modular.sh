# install-pentest-modular.sh
# üõ°Ô∏è Super Modular Pentest Bootstrap (Ubuntu/Xubuntu 22.04/24.04)
# Author : ChatGPT x TenRusli - Andika Rusli
# Etika  : Gunakan hanya pada aset milik sendiri / ada izin tertulis.
# Usage  : chmod +x modular.sh
# ./modular.sh --all
# atau pilih modul:
# ./modular.sh --modules web,windows_ad,mobile
# lihat daftar modul:
# ./modular.sh --list


set -u -o pipefail
export DEBIAN_FRONTEND=noninteractive
LC_ALL=C

# ====== KONFIGURASI DASAR ======
[ "$(id -u)" -eq 0 ] && SUDO="" || SUDO="sudo"
TOOLS_DIR="$HOME/tools"
LOGFILE="$HOME/pentest-modular-install.log"
SUMMARY="$HOME/pentest-modular-summary.txt"
FAILED_PKGS=()
FAILED_CMDS=()
mkdir -p "$TOOLS_DIR" && : > "$LOGFILE"

# ====== UTIL LOG ======
log()  { printf "üîß %s\n" "$*" | tee -a "$LOGFILE"; }
ok()   { printf "‚úÖ %s\n" "$*" | tee -a "$LOGFILE"; }
warn() { printf "‚ö†Ô∏è  %s\n" "$*" | tee -a "$LOGFILE"; }
run() {
  local desc="$1"; shift
  printf "‚è≥ %s ...\n" "$desc" | tee -a "$LOGFILE"
  if ! "$@" >>"$LOGFILE" 2>&1; then
    warn "Gagal: $desc"; FAILED_CMDS+=("$desc"); return 1
  fi
  ok "OK: $desc"
}

# ====== APT & ENSURE HELPERS ======
apt_install_one() {
  local pkg="$1"
  dpkg -s "$pkg" >/dev/null 2>&1 && { ok "APT: $pkg sudah terpasang"; return 0; }
  if ! $SUDO apt-get install -y "$pkg" >>"$LOGFILE" 2>&1; then
    warn "APT gagal: $pkg"; FAILED_PKGS+=("$pkg"); return 1
  fi
  ok "APT: $pkg terpasang"
}
apt_install_many(){ for p in "$@"; do apt_install_one "$p"; done; }
apt_ensure(){ run "APT ensure $1" $SUDO apt-get install -y "$1"; }

pipx_ensure(){
  local pkg="$1"
  if pipx list 2>/dev/null | grep -E "package $pkg " -q; then
    run "pipx upgrade $pkg" pipx upgrade "$pkg"
  else
    run "pipx install $pkg" pipx install "$pkg"
  fi
}
npm_ensure_global(){ local pkg="$1"; run "npm i -g $pkg@latest" npm i -g "$pkg@latest"; }
gem_ensure(){
  local pkg="$1"
  if gem list -i "$pkg" >/dev/null 2>&1; then
    run "gem update $pkg" $SUDO gem update --no-document "$pkg"
  else
    run "gem install $pkg" $SUDO gem install --no-document "$pkg"
  fi
}
git_ensure(){
  local url="$1" dest="$2"
  if [ -d "$dest/.git" ]; then
    run "git pull $dest" git -C "$dest" pull --ff-only
  else
    run "git clone $url $dest" git clone "$url" "$dest"
  fi
}
go_install_copy(){
  local mod="$1" bin="$2"
  run "go install $bin" go install "$mod@latest"
  [ -x "$GOBIN/$bin" ] && [ -n "$SUDO" ] && run "copy $bin ‚Üí /usr/local/bin" $SUDO cp "$GOBIN/$bin" /usr/local/bin/ || true
}

ensure_path(){
  local line='export PATH="$HOME/.local/bin:$HOME/go/bin:$PATH"'
  grep -Fq "$line" "$HOME/.bashrc" 2>/dev/null || echo "$line" >> "$HOME/.bashrc"
  export PATH="$HOME/.local/bin:$HOME/go/bin:$PATH"
}

check_network(){
  log "üåê Cek koneksi jaringan"
  if ping -c1 -W2 8.8.8.8 >/dev/null 2>&1 || curl -fsI https://www.google.com >/dev/null 2>&1; then
    ok "Koneksi OK"
  else
    warn "Koneksi bermasalah. Sebagian instalasi bisa gagal (tetap lanjut)."
  fi
}

finish(){
  log "üßæ Menyusun ringkasan"
  {
    echo "üéØ INSTALLED / UPDATED (best-effort). Log: $LOGFILE"
    echo "üì¶ Tools dir: $TOOLS_DIR"
    echo
    echo "üîë Grup yang butuh relogin: docker, wireshark"
    echo
    echo "üß™ Quick verify (opsional):"
    echo " - nmap --version ; nuclei -version ; amass -version ; httpx -version"
    echo " - wpscan --version ; semgrep --version ; retire --version"
    echo " - docker --version ; docker compose version ; trivy -v ; syft -v ; grype -v ; dockle -v"
    echo " - hashcat --version ; john --list=build-info"
    echo " - adb version ; scrcpy --version ; frida --version ; objection --version"
    echo " - impacket-smbclient -h ; netexec --version ; certipy -h ; kerbrute -h ; evil-winrm -h"
    echo
    if [ "${#FAILED_PKGS[@]}" -gt 0 ] || [ "${#FAILED_CMDS[@]}" -gt 0 ]; then
      echo "‚ö†Ô∏è  Komponen bermasalah (cek log; aman diabaikan bila tidak perlu):"
      [ "${#FAILED_PKGS[@]}" -gt 0 ] && echo " - APT: ${FAILED_PKGS[*]}"
      if [ "${#FAILED_CMDS[@]}" -gt 0 ]; then
        echo " - CMD:"; for x in "${FAILED_CMDS[@]}"; do echo "    ‚Ä¢ $x"; done
      fi
    else
      echo "üéâ Tidak ada kegagalan terdeteksi."
    fi
    echo
    echo "‚ÑπÔ∏è  Etika & izin: gunakan hanya pada aset perusahaan Anda."
  } > "$SUMMARY"
  echo "‚úÖ Selesai! Ringkasan: $SUMMARY ‚Äî Log: $LOGFILE"
}
trap finish EXIT

# ====== MODUL DEFINISI ======
module_core(){
  log "üß± CORE: system essentials, toolchain, docker/wireshark"
  run "apt update" $SUDO apt-get update -y
  run "apt upgrade" $SUDO apt-get upgrade -y
  apt_install_many build-essential dkms curl wget git unzip lsb-release \
    software-properties-common ca-certificates gnupg2 apt-transport-https \
    python3 python3-pip python3-venv python3-dev net-tools jq perl gcc make \
    zlib1g-dev ruby-full openjdk-11-jre pkg-config cmake rustc cargo \
    libffi-dev libssl-dev libkrb5-dev libldap2-dev libsasl2-dev libpcap-dev
  apt_install_many pipx golang || true
  run "pipx ensurepath" pipx ensurepath || true
  export GOPATH="$HOME/go"; export GOBIN="$GOPATH/bin"; mkdir -p "$GOBIN"; ensure_path
  # Node.js 20.x
  if ! command -v node >/dev/null 2>&1; then
    run "NodeSource repo" bash -lc 'curl -fsSL https://deb.nodesource.com/setup_20.x | '"$SUDO"' -E bash -'
    apt_install_many nodejs || true
  fi
  command -v npm >/dev/null 2>&1 || apt_install_many npm || true
  # Docker
  apt_install_many docker.io docker-compose-plugin || true
  run "usermod docker" $SUDO usermod -aG docker "$USER" || true
  # Wireshark non-root
  echo "wireshark-common wireshark-common/install-setuid boolean true" | $SUDO debconf-set-selections || true
  apt_install_many wireshark tshark || true
  run "usermod wireshark" $SUDO usermod -aG wireshark "$USER" || true
  run "setcap dumpcap" $SUDO setcap cap_net_raw,cap_net_admin+eip "$(command -v dumpcap)" || true
}

module_web(){
  log "üåê WEB & RECON"
  for p in nmap nikto sqlmap zaproxy ffuf gobuster whatweb wafw00f dirb dirbuster \
           metasploit-framework tcpdump mitmproxy netcat-openbsd; do apt_ensure "$p"; done
  # ProjectDiscovery + httprobe
  go_install_copy github.com/projectdiscovery/httpx/cmd/httpx httpx
  go_install_copy github.com/projectdiscovery/subfinder/v2/cmd/subfinder subfinder
  go_install_copy github.com/projectdiscovery/nuclei/v3/cmd/nuclei nuclei
  go_install_copy github.com/projectdiscovery/dnsx/cmd/dnsx dnsx
  go_install_copy github.com/projectdiscovery/naabu/v2/cmd/naabu naabu
  go_install_copy github.com/tomnomnom/httprobe httprobe
  # Amass
  go_install_copy github.com/owasp-amass/amass/v4/... amass
  # OSINT
  apt_install_many theharvester dnsrecon whois || true
  pipx_ensure recon-ng
  pipx_ensure shodan
}

module_wireless(){
  log "üì° WIRELESS (Wi-Fi)"
  apt_install_many aircrack-ng reaver pixiewps wifite hcxdumptool hcxtools kismet || true
}

module_bluetooth(){
  log "ü©µ BLUETOOTH / BLE"
  apt_install_many bluez bluez-tools blueman bettercap || true
  pipx_ensure btlejack
}

module_mobile(){
  log "ü§ñ ANDROID toolset"
  apt_install_many adb fastboot apktool jadx scrcpy || true
  pipx_ensure frida-tools
  pipx_ensure objection
}

module_ios(){
  log "üçé iOS device comms (USB)"
  apt_install_many libimobiledevice6 libimobiledevice-utils usbmuxd libusbmuxd-tools ifuse || true
}

module_macos(){
  log "üçè macOS pendukung / forensik"
  apt_install_many tigervnc-viewer sleuthkit plaso-tools yara || true
  apt_install_many osquery || true
}

module_iot(){
  log "‚öôÔ∏è  IoT / Arduino / Serial"
  apt_install_many arduino arduino-mk minicom screen avrdude || true
  pipx_ensure esptool
  pipx_ensure platformio
}

module_passwords(){
  log "üîê Password/Hash"
  apt_install_many hashcat john hydra medusa || true
  git_ensure https://github.com/danielmiessler/SecLists.git "$TOOLS_DIR/SecLists"
}

module_exploitation(){
  log "üí• Exploitation / Lateral"
  git_ensure https://github.com/lgandx/Responder.git "$TOOLS_DIR/Responder"
  git_ensure https://github.com/zerosum0x0/koadic.git "$TOOLS_DIR/koadic"
  apt_install_many exploitdb || true
}

module_priv_esc(){
  log "üß© Privilege Escalation"
  git_ensure https://github.com/carlospolop/PEASS-ng.git "$TOOLS_DIR/PEASS-ng"
  mkdir -p "$TOOLS_DIR/priv-esc"
  run "linpeas.sh"  curl -fsSL https://raw.githubusercontent.com/carlospolop/PEASS-ng/master/linPEAS/linpeas.sh -o "$TOOLS_DIR/priv-esc/linpeas.sh"
  run "winPEAS.bat" curl -fsSL https://raw.githubusercontent.com/carlospolop/PEASS-ng/master/winPEAS/winPEAS.bat -o "$TOOLS_DIR/priv-esc/winPEAS.bat"
  run "chmod linpeas" chmod +x "$TOOLS_DIR/priv-esc/linpeas.sh"
}

module_cms_sast(){
  log "üß± CMS / Framework + SAST & Dep-Audit"
  gem_ensure wpscan
  pipx_ensure droopescan
  pipx_ensure smbmap
  apt_install_many php php-cli php-xml composer php-codesniffer || true
  pipx_ensure semgrep
  pipx_ensure bandit
  pipx_ensure safety
  npm_ensure_global retire
  npm_ensure_global lighthouse
}

module_containers(){
  log "üê≥ Containers / Image Security"
  # Docker sudah di CORE
  if ! command -v trivy >/dev/null 2>&1; then
    if command -v snap >/dev/null 2>&1; then run "snap trivy" $SUDO snap install trivy || true; fi
  fi
  command -v trivy >/dev/null 2>&1 || run "install Trivy (script)" bash -lc 'curl -sSfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | '"$SUDO"' sh -s -- -b /usr/local/bin'
  run "install Syft"  bash -lc 'curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh  | '"$SUDO"' sh -s -- -b /usr/local/bin'
  run "install Grype" bash -lc 'curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | '"$SUDO"' sh -s -- -b /usr/local/bin'
  run "install Dockle" bash -lc 'curl -sSfL https://raw.githubusercontent.com/goodwithtech/dockle/main/install.sh | '"$SUDO"' sh -s -- -b /usr/local/bin'
}

module_databases(){
  log "üóÑÔ∏è  DB Clients & Audit"
  apt_install_many mysql-client postgresql-client sqlite3 redis-tools mysqltuner ldap-utils smbclient || true
  if ! command -v mongosh >/dev/null 2>&1 && command -v snap >/dev/null 2>&1; then
    run "snap mongosh" $SUDO snap install mongosh || true
  fi
  pipx_ensure nosqlmap
}

module_forensics(){
  log "üß∞ Forensics & Stego"
  apt_install_many exiftool binwalk foremost steghide || true
}

module_http_tls(){
  log "üîí HTTP/TLS hardening"
  apt_install_many sslscan || true
  git_ensure https://github.com/drwetter/testssl.sh.git "$TOOLS_DIR/testssl.sh"
  [ -x /usr/local/bin/testssl.sh ] || run "symlink testssl" $SUDO ln -s "$TOOLS_DIR/testssl.sh/testssl.sh" /usr/local/bin/testssl.sh
}

module_windows_ad(){
  log "üßø Windows / Active Directory"
  pipx_ensure impacket
  pipx_ensure netexec
  pipx_ensure bloodhound-python
  pipx_ensure certipy-ad
  pipx_ensure ldapdomaindump
  gem_ensure evil-winrm
  go_install_copy github.com/ropnop/kerbrute kerbrute
}

module_remote(){
  log "üñ•Ô∏è  Remote clients"
  apt_install_many freerdp2-x11 remmina tigervnc-viewer rdesktop openssh-client telnet socat ncat || true
}

# ====== CLI PARSER ======
MODULES_ALL=(core web wireless bluetooth mobile ios macos iot passwords exploitation priv_esc cms_sast containers databases forensics http_tls windows_ad remote)
SELECTED=()

show_help(){
  cat <<EOF
Usage:
  $0 --all               # pasang semua modul (default)
  $0 --modules a,b,c     # pilih modul tertentu (koma)
  $0 --list              # tampilkan daftar modul
Modul tersedia:
  ${MODULES_ALL[*]}
EOF
}

if [ $# -eq 0 ]; then SELECTED=("${MODULES_ALL[@]}"); fi
while [ $# -gt 0 ]; do
  case "$1" in
    --all)      SELECTED=("${MODULES_ALL[@]}"); shift;;
    --modules)  IFS=',' read -r -a SELECTED <<< "${2:-}"; shift 2;;
    --list)     printf "%s\n" "${MODULES_ALL[@]}"; exit 0;;
    -h|--help)  show_help; exit 0;;
    *)          warn "Argumen tidak dikenal: $1"; show_help; exit 1;;
  esac
done

# Pastikan CORE ikut kalau belum dipilih
NEED_CORE=1
for m in "${SELECTED[@]}"; do [ "$m" = "core" ] && NEED_CORE=0; done
[ $NEED_CORE -eq 1 ] && SELECTED=("core" "${SELECTED[@]}")

# ====== EKSEKUSI ======
log "üèÅ MULAI ‚Äî modul: ${SELECTED[*]}"
check_network
for m in "${SELECTED[@]}"; do
  fn="module_${m}"
  if declare -f "$fn" >/dev/null 2>&1; then
    $fn
  else
    warn "Modul tidak dikenal: $m"
  fi
done

exit 0
