# install-pentest-ultimate.sh
# üöÄ Super Complete Pentest Bootstrap (Ubuntu/Xubuntu 22.04/24.04)
# Author : ChatGPT x TenRusli - Andika Rusli
# Etika  : HANYA untuk aset sendiri / izin tertulis. Semua percobaan best-effort (tidak stop), dicatat ke log.
# Usahge : chmod +x ultimate.sh && ./ultimate.sh


set -u -o pipefail
export DEBIAN_FRONTEND=noninteractive
LC_ALL=C

# ========== KONFIGURASI DASAR ==========
[ "$(id -u)" -eq 0 ] && SUDO="" || SUDO="sudo"
TOOLS_DIR="$HOME/tools"
LOGFILE="$HOME/pentest-ultimate-install.log"
SUMMARY="$HOME/pentest-ultimate-summary.txt"
FAILED_PKGS=()
FAILED_CMDS=()

mkdir -p "$TOOLS_DIR" && : >"$LOGFILE"

# ========== UTIL LOG ==========
log()  { printf "üîß %s\n" "$*" | tee -a "$LOGFILE"; }
ok()   { printf "‚úÖ %s\n" "$*" | tee -a "$LOGFILE"; }
warn() { printf "‚ö†Ô∏è  %s\n" "$*" | tee -a "$LOGFILE"; }

# Jalankan perintah sekali; gagal ‚Üí catat & lanjut
run() {
  local desc="$1"; shift
  printf "‚è≥ %s ...\n" "$desc" | tee -a "$LOGFILE"
  if ! "$@" >>"$LOGFILE" 2>&1; then
    warn "Gagal: $desc"
    FAILED_CMDS+=("$desc")
    return 1
  fi
  ok "OK: $desc"
}

# APT per-paket (skip jika sudah ada)
apt_install_one() {
  local pkg="$1"
  dpkg -s "$pkg" >/dev/null 2>&1 && { ok "APT: $pkg sudah terpasang"; return 0; }
  if ! $SUDO apt-get install -y "$pkg" >>"$LOGFILE" 2>&1; then
    warn "APT gagal: $pkg"; FAILED_PKGS+=("$pkg"); return 1
  fi
  ok "APT: $pkg terpasang"
}
apt_install_many() { for p in "$@"; do apt_install_one "$p"; done; }

# APT ensure (selalu pastikan kandidat terbaru) ‚Äî gunakan di daftar penting
apt_ensure() { run "APT ensure $1" $SUDO apt-get install -y "$1"; }

# pipx / npm / gem / git / go installers (idempotent + upgrade)
pipx_ensure() {
  local pkg="$1"
  if pipx list 2>/dev/null | grep -E "package $pkg " -q; then
    run "pipx upgrade $pkg" pipx upgrade "$pkg"
  else
    run "pipx install $pkg" pipx install "$pkg"
  fi
}
npm_ensure_global() { local pkg="$1"; run "npm i -g $pkg@latest" npm i -g "$pkg@latest"; }
gem_ensure() {
  local pkg="$1"
  if gem list -i "$pkg" >/dev/null 2>&1; then
    run "gem update $pkg" $SUDO gem update --no-document "$pkg"
  else
    run "gem install $pkg" $SUDO gem install --no-document "$pkg"
  fi
}
git_ensure() {
  local url="$1" dest="$2"
  if [ -d "$dest/.git" ]; then
    run "git pull $dest" git -C "$dest" pull --ff-only
  else
    run "git clone $url $dest" git clone "$url" "$dest"
  fi
}
go_install_copy() {
  local mod="$1" bin="$2"
  run "go install $bin" go install "$mod@latest"
  [ -x "$GOBIN/$bin" ] && [ -n "$SUDO" ] && run "copy $bin ‚Üí /usr/local/bin" $SUDO cp "$GOBIN/$bin" /usr/local/bin/ || true
}

# PATH user-level
ensure_path() {
  local line='export PATH="$HOME/.local/bin:$HOME/go/bin:$PATH"'
  grep -Fq "$line" "$HOME/.bashrc" 2>/dev/null || echo "$line" >> "$HOME/.bashrc"
  export PATH="$HOME/.local/bin:$HOME/go/bin:$PATH"
}

# Network check
check_network() {
  log "üåê Cek koneksi jaringan"
  if ping -c1 -W2 8.8.8.8 >/dev/null 2>&1 || curl -fsI https://www.google.com >/dev/null 2>&1; then
    ok "Koneksi OK"
  else
    warn "Koneksi bermasalah. Beberapa instalasi bisa gagal (tetap lanjut)."
  fi
}

# Ringkasan di akhir apa pun kondisinya
finish() {
  log "üßæ Menyusun ringkasan"
  {
    echo "üéØ INSTALLED / UPDATED (best-effort). Log: $LOGFILE"
    echo
    echo "üì¶ Tools dir: $TOOLS_DIR"
    echo
    echo "üîë Grup yang butuh relogin:"
    echo " - docker (jalankan docker tanpa sudo)"
    echo " - wireshark (capture tanpa sudo)"
    echo
    echo "üß™ Quick verify:"
    echo " - nmap --version"
    echo " - httpx -version; subfinder -version; nuclei -version; amass -version"
    echo " - wpscan --version; semgrep --version; retire --version"
    echo " - docker --version; docker compose version; trivy -v; syft -v; grype -v; dockle -v"
    echo " - hashcat --version; john --list=build-info"
    echo " - adb version; scrcpy --version; frida --version; objection --version"
    echo " - impacket-smbclient -h; netexec --version; bloodhound-python -h; certipy -h; kerbrute -h; evil-winrm -h"
    echo " - idevice_id -l; iproxy -h; ifuse -V"
    echo
    if [ "${#FAILED_PKGS[@]}" -gt 0 ] || [ "${#FAILED_CMDS[@]}" -gt 0 ]; then
      echo "‚ö†Ô∏è  Komponen bermasalah (aman diabaikan jika tidak perlu):"
      [ "${#FAILED_PKGS[@]}" -gt 0 ] && echo " - APT: ${FAILED_PKGS[*]}"
      if [ "${#FAILED_CMDS[@]}" -gt 0 ]; then
        echo " - CMD:"; for x in "${FAILED_CMDS[@]}"; do echo "    ‚Ä¢ $x"; done
      fi
    else
      echo "üéâ Tidak ada kegagalan terdeteksi."
    fi
    echo
    echo "‚ÑπÔ∏è  Catatan:"
    echo " - BloodHound GUI & Neo4j tidak dipasang (opsional: container)."
    echo " - iOS dynamic testing butuh frida-server di device & pairing resmi."
    echo " - Gunakan hanya pada aset milik perusahaan Anda (izin legal)."
  } > "$SUMMARY"

  echo
  echo "==============================================="
  echo "‚úÖ Selesai!  üìÑ Ringkasan: $SUMMARY"
  echo "ü™µ Log: $LOGFILE"
  echo "üîÅ Tips: Logout/login agar grup 'docker' & 'wireshark' aktif."
  echo "==============================================="
}
trap finish EXIT

# ========== BANNER ==========
echo "==============================================="
echo "üõ°Ô∏è  Super Ultimate Pentest Installer ‚Äî Linux Operator"
echo "==============================================="
echo "üìÑ Log file: $LOGFILE"
echo

# ========== MULAI ==========
check_network

log "üì¶ Update & upgrade APT"
run "apt-get update" $SUDO apt-get update -y
run "apt-get upgrade" $SUDO apt-get upgrade -y

log "üß± Instal paket esensial + build deps"
apt_install_many build-essential dkms curl wget git unzip lsb-release \
  software-properties-common ca-certificates gnupg2 apt-transport-https \
  python3 python3-pip python3-venv python3-dev net-tools jq perl gcc make \
  zlib1g-dev ruby-full openjdk-11-jre pkg-config cmake rustc cargo \
  libffi-dev libssl-dev libkrb5-dev libldap2-dev libsasl2-dev libpcap-dev

log "üêç pipx setup + PATH"
apt_install_many pipx || true
run "pipx ensurepath" pipx ensurepath || true
ensure_path

log "üêπ Instal Go toolchain"
apt_install_many golang || true
export GOPATH="$HOME/go"; export GOBIN="$GOPATH/bin"; mkdir -p "$GOBIN"; ensure_path

log "üü¢ Node.js 20.x (NodeSource) + npm"
if ! command -v node >/dev/null 2>&1; then
  run "Add NodeSource repo" bash -lc 'curl -fsSL https://deb.nodesource.com/setup_20.x | '"$SUDO"' -E bash -'
  apt_install_many nodejs || true
else ok "Node.js sudah ada"; fi
command -v npm >/dev/null 2>&1 || apt_install_many npm || true

log "üê≥ Docker Engine & Compose plugin"
apt_install_many docker.io docker-compose-plugin || true
run "Tambah $USER ke grup docker" $SUDO usermod -aG docker "$USER" || true

log "ü¶à Wireshark non-root capture"
echo "wireshark-common wireshark-common/install-setuid boolean true" | $SUDO debconf-set-selections || true
apt_install_many wireshark tshark || true
run "Add $USER ‚Üí grup wireshark" $SUDO usermod -aG wireshark "$USER" || true
run "setcap dumpcap" $SUDO setcap cap_net_raw,cap_net_admin+eip "$(command -v dumpcap)" || true

# ========== NETWORK / WEB ==========
log "üåê Network/Web pentest (APT ensure)"
for p in nmap nikto sqlmap zaproxy ffuf gobuster whatweb wafw00f dirb dirbuster \
         metasploit-framework tcpdump mitmproxy netcat-openbsd; do apt_ensure "$p"; done

log "üß∞ ProjectDiscovery suite + httprobe"
go_install_copy github.com/projectdiscovery/httpx/cmd/httpx httpx
go_install_copy github.com/projectdiscovery/subfinder/v2/cmd/subfinder subfinder
go_install_copy github.com/projectdiscovery/nuclei/v3/cmd/nuclei nuclei
go_install_copy github.com/projectdiscovery/dnsx/cmd/dnsx dnsx
go_install_copy github.com/projectdiscovery/naabu/v2/cmd/naabu naabu
go_install_copy github.com/tomnomnom/httprobe httprobe

log "üîé OWASP Amass"
go_install_copy github.com/owasp-amass/amass/v4/... amass

log "üïµÔ∏è OSINT / Recon"
apt_install_many theharvester dnsrecon whois || true
pipx_ensure recon-ng
pipx_ensure shodan

# ========== WIRELESS ==========
log "üì° Wi-Fi pentest"
apt_install_many aircrack-ng reaver pixiewps wifite hcxdumptool hcxtools kismet || true

log "ü©µ Bluetooth / BLE"
apt_install_many bluez bluez-tools blueman bettercap || true
pipx_ensure btlejack

# ========== MOBILE ==========
log "ü§ñ Android toolkit"
apt_install_many adb fastboot apktool jadx scrcpy || true
pipx_ensure frida-tools
pipx_ensure objection

log "üçé iOS (device comms via USB)"
apt_install_many libimobiledevice6 libimobiledevice-utils usbmuxd libusbmuxd-tools ifuse || true

# ========== macOS / CROSS ==========
log "üçè macOS pendukung (forensik/remote)"
apt_install_many tigervnc-viewer sleuthkit plaso-tools yara || true
# osquery sering di repo terpisah; jika tidak ada, akan tercatat saja
apt_install_many osquery || true

# ========== IOT / HARDWARE ==========
log "‚öôÔ∏è  IoT / Arduino / Serial"
apt_install_many arduino arduino-mk minicom screen avrdude || true
pipx_ensure esptool
pipx_ensure platformio

# ========== PASSWORD / HASH ==========
log "üîê Password & Hash tools + wordlists"
apt_install_many hashcat john hydra medusa || true
git_ensure https://github.com/danielmiessler/SecLists.git "$TOOLS_DIR/SecLists"

# ========== EXPLOITATION / LATERAL ==========
log "üí• Exploitation frameworks & tools"
git_ensure https://github.com/lgandx/Responder.git "$TOOLS_DIR/Responder"
git_ensure https://github.com/zerosum0x0/koadic.git "$TOOLS_DIR/koadic"
apt_install_many exploitdb || true

# ========== PRIVILEGE ESC ==========
log "üß© Privilege Escalation helpers"
git_ensure https://github.com/carlospolop/PEASS-ng.git "$TOOLS_DIR/PEASS-ng"
mkdir -p "$TOOLS_DIR/priv-esc"
run "Download linpeas.sh"  curl -fsSL https://raw.githubusercontent.com/carlospolop/PEASS-ng/master/linPEAS/linpeas.sh -o "$TOOLS_DIR/priv-esc/linpeas.sh"
run "Download winPEAS.bat" curl -fsSL https://raw.githubusercontent.com/carlospolop/PEASS-ng/master/winPEAS/winPEAS.bat -o "$TOOLS_DIR/priv-esc/winPEAS.bat"
run "chmod linpeas.sh" chmod +x "$TOOLS_DIR/priv-esc/linpeas.sh"

# ========== CMS / FRAMEWORK / SAST ==========
log "üß± CMS & Framework"
gem_ensure wpscan
pipx_ensure droopescan
pipx_ensure smbmap
apt_install_many php php-cli php-xml composer php-codesniffer || true
pipx_ensure semgrep
pipx_ensure bandit
pipx_ensure safety
npm_ensure_global retire
npm_ensure_global lighthouse

# ========== CONTAINERS / IMAGE SECURITY ==========
log "üê≥ Container scanners (Trivy, Syft, Grype, Dockle)"
if ! command -v trivy >/dev/null 2>&1; then
  if command -v snap >/dev/null 2>&1; then
    run "snap install trivy" $SUDO snap install trivy || true
  fi
fi
command -v trivy >/dev/null 2>&1 || run "install Trivy (script)" bash -lc 'curl -sSfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | '"$SUDO"' sh -s -- -b /usr/local/bin'
run "install Syft"  bash -lc 'curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh  | '"$SUDO"' sh -s -- -b /usr/local/bin'
run "install Grype" bash -lc 'curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | '"$SUDO"' sh -s -- -b /usr/local/bin'
run "install Dockle" bash -lc 'curl -sSfL https://raw.githubusercontent.com/goodwithtech/dockle/main/install.sh | '"$SUDO"' sh -s -- -b /usr/local/bin'

# ========== DATABASE CLIENTS / AUDIT ==========
log "üóÑÔ∏è  Database clients & audit"
apt_install_many mysql-client postgresql-client sqlite3 redis-tools mysqltuner ldap-utils smbclient || true
if ! command -v mongosh >/dev/null 2>&1 && command -v snap >/dev/null 2>&1; then
  run "snap install mongosh" $SUDO snap install mongosh || true
fi
pipx_ensure nosqlmap

# ========== FORENSICS / STEGO ==========
log "üß∞ Forensics & Stego"
apt_install_many exiftool binwalk foremost steghide || true

# ========== HTTP/TLS HARDENING ==========
log "üîí HTTP/TLS hardening"
apt_install_many sslscan || true
git_ensure https://github.com/drwetter/testssl.sh.git "$TOOLS_DIR/testssl.sh"
[ -x /usr/local/bin/testssl.sh ] || run "symlink testssl.sh" $SUDO ln -s "$TOOLS_DIR/testssl.sh/testssl.sh" /usr/local/bin/testssl.sh

# ========== WINDOWS / ACTIVE DIRECTORY ==========
log "üßø Windows/AD Offensive Toolset"
pipx_ensure impacket            # psexec.py, wmiexec.py, secretsdump.py, dll
pipx_ensure netexec             # pengganti CrackMapExec
pipx_ensure bloodhound-python   # BloodHound ingestor (python)
pipx_ensure certipy-ad          # ADCS abuse
pipx_ensure ldapdomaindump
gem_ensure evil-winrm
go_install_copy github.com/ropnop/kerbrute kerbrute

log "üñ•Ô∏è  RDP/VNC & remote clients"
apt_install_many freerdp2-x11 remmina tigervnc-viewer rdesktop openssh-client telnet socat ncat || true

# ‚Äî‚Äî‚Äî Selesai (ringkasan ditangani oleh trap EXIT) ‚Äî‚Äî‚Äî
exit 0
